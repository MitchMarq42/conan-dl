#!/bin/sh

# I've just rewrote conan-dl
# Now in more POSIX-ish shell!
# And though it's still cringe
# We all love to binge
# So I'll fix it for good, what the hell?

# Yes sadly it seems this is growing
# Far beyond my own mind's knowing
# You will know what I meant
# By the time that I've spent
# And the way that I still over-comment!

# default variable assignments
startingdir="$PWD"
tmpdir="${TMPDIR:-/tmp}"
menu="fzf" # Also see config file, it re-defines this if the value is set.
# Source the config file
. "${XDG_CONFIG_HOME:-$HOME/.config}/conan-dl/conan-dl.conf" # in `dash`, the source command does not exist, but . does the same thing

deps="sh curl sed fzf yt-dlp" # an arbitrary array. Needs fixing
depcheck() {
    for dep in $deps
    do
        which "$dep" >/dev/null && # On future OSes the `which` utility may be deprecated. `type` may be your friend
        echo "Dependency $dep satisfied!" ||
    echo "$dep not found! Go install it right now."
    done
}

while getopts ":s:a:f:l:r:o:m:hwd" opt; # Long options would be nice, but limit portability.
do
    case $opt in
        s)    streamsite=$OPTARG;;
        a)    anime=$OPTARG ;;
        f)    firstep=$OPTARG ;;
        l)    lastep=$OPTARG ;;
        r)    resolution=$OPTARG ;;
        o)    outputdir=$OPTARG ;;
        m)    menu=$OPTARG ;;
        h)
            cat <<-EOF # this is a heredoc. Basically the snippet of a more civilized age.
Conan-dl. Use at thy peril.
      Options are as follows:
      -s    streamsite
      -a    anime
      -f    firstep
      -l    lastep
      -r    resolution
      -m    menu
      -h    show this help
EOF
            exit 0
            ;;
        w)    watch=yes ;; # not implemented. Maybe in the future when this is merged into ani-cli?
        d)    depcheck; exit ;;
        *)    echo "Invalid option. Go home."; exit ;;
    esac
done

# Clean up values
resolution=$(echo $resolution | sed 's/p$//;s/P$//')

# Get a feel for the terminal
LINES=$(tput lines)
COLUMNS=$(tput cols)
# _=$((totaleps=(lastep-firstep+1) ))
# _=$((termstart=(LINES-totaleps-1) ))

search_eps () {
    # get final episode number of $animiegg
    animegg=$1
    curl -s "https://$streamsite/category/$animegg" |
    sed -n -E '
        /^[[:space:]]*<a href="#" class="active" ep_start/{
        s/.* '\''([0-9]*)'\'' ep_end = '\''([0-9]*)'\''.*/\2/p
        q
        }
        '
}

# Display human-readable info. Sanity check.
echo "Anime: $anime"
echo "Episodes: $firstep to $lastep"
echo "Resolution: $resolution"

search_anime () {
    # get proper anime name
    search=$(echo "$1" | sed 's/\s/-/g' )
    curl -s "https://$streamsite//search.html" \
        -G \
        -d "keyword=$search" |
    sed -n -E '
        s_^[[:space:]]*<a href="/category/([^"]*)" title="([^"]*)".*_\1_p
        '
}

get_animegg() {
search_anime "$anime" |
    $menu
}

animegg=$(get_animegg)

[ $lastep = 'END' ] &&
    lastep=$(search_eps $animegg)

# BROKEN
#[ $watch == "yes" ] >/dev/null && echo "Go use ani-cli, you lazy scum" || echo "Downloading"
echo "Actual anime: $animegg"

get_embedurl() {
    animegg=$1 #pass in parameters
    epnum=$2 #pass in parameters
    curl -s "https://$streamsite/$animegg-episode-$epnum" |
    sed -n -E '
        /^[[:space:]]*<a href="#" rel="100"/{
        s/.*data-video="([^"]*)".*/https:\1/p
        q
        }'
}
get_streamurl() {
    embedurl="$1"
    streamurl=$(curl -s "$embedurl" |
    sed -n -E '
        /^[[:space:]]*sources:/{
        s/.*(https[^'\'']*).*/\1/p
        q
        }
        ')
    printf '%s' "$streamurl" | sed -n -E "s/(.*)\.m3u8/\1.$resolution.m3u8/p"
}
get_episode() {
    epnum=$1
    embedurl=$2
    streamurl=$3
    #echo streamurl = "$streamurl"
    yt-dlp \
        "$streamurl" \
        "--add-header=Referer: $embedurl" \
        "--restrict-filenames" \
        "--quiet" \
        "--progress" \
        "--newline"
        #"--output ep.$epnum.%(ext)s" \
}

eps=$(seq "$firstep" "$lastep" 2>/dev/null || cat "${XDG_CONFIG_HOME:-$HOME/.config}/conan-dl/eplist.list")

mkdir -p "$outputdir" && cd "$outputdir"
mkdir -p "$tmpdir/cdl/$animegg"
echo "This might take a while. Go outside."
for epnum in $eps
do
    embedurl=$(get_embedurl "$animegg" "$epnum")
    streamurl=$(get_streamurl "$embedurl")
    get_episode "$epnum" "$embedurl" "$streamurl" >"$tmpdir/cdl/$animegg/$epnum.status" 2>/dev/null &
 #&& \        # echo "finished downloading episode $epnum" ||
        # echo "Failed to download episode $epnum!!!" &
    # echo "downloading episode $epnum..."
done

tput sc
while true
do
    tput rc
    >"$tmpdir/cdl/$animegg/statusall.tmp"
    for epnum in $eps
    do
        tail -n 1 "$tmpdir/cdl/$animegg/$epnum.status" >> "$tmpdir/cdl/$animegg/statusall.tmp"
        # rm $tmpdir/cdl/$epnum.status
    done
    cat "$tmpdir/cdl/$animegg/statusall.tmp"
    sleep 0.5
done
exit

wait
cd "$startingdir" && echo "all done."
